# Dockerfile para desenvolvimento
FROM python:3.11-slim-bullseye

# Definir variáveis de ambiente para desenvolvimento
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Definir diretório de trabalho
WORKDIR /app

# Instalar dependências do sistema
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copiar apenas requirements primeiro (para cache)
COPY requirements.txt ./

# Instalar dependências Python
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copiar código do projeto
COPY . .

# Definir argumentos de build
ARG SUPABASE_PUBLIC_URL
ARG ANON_KEY
ARG WTS_API_TOKEN
ARG OLLAMA_MODEL
ARG OLLAMA_HOST
ARG OLLAMA_PORT
ARG OLLAMA_URL
ARG SERVER_HOST
ARG SERVER_PORT
ARG QDRANT_HOST
ARG QDRANT_PORT
ARG HF_HOME
ARG TRANSFORMERS_CACHE
ARG HF_DATASETS_CACHE

# Criar diretório de cache para o Hugging Face
RUN mkdir -p /home/appuser/.cache/huggingface && \
    chown -R appuser:appuser /home/appuser/.cache

# Definir variáveis de ambiente para desenvolvimento
ENV PYTHONPATH=/app/src \
    ENVIRONMENT=development \
    DEBUG=true \
    SUPABASE_PUBLIC_URL=${SUPABASE_PUBLIC_URL} \
    ANON_KEY=${ANON_KEY} \
    WTS_API_TOKEN=${WTS_API_TOKEN} \
    OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.2} \
    OLLAMA_HOST=${OLLAMA_HOST:-ollama} \
    OLLAMA_PORT=${OLLAMA_PORT:-11434} \
    OLLAMA_URL=${OLLAMA_URL:-http://ollama:11434} \
    SERVER_HOST=${SERVER_HOST:-0.0.0.0} \
    SERVER_PORT=${SERVER_PORT:-8001} \
    QDRANT_HOST=${QDRANT_HOST:-localhost} \
    QDRANT_PORT=${QDRANT_PORT:-6333} \
    REDIS_HOST=localhost \
    REDIS_PORT=6379 \
    HF_HOME=${HF_HOME:-/home/appuser/.cache/huggingface} \
    TRANSFORMERS_CACHE=${TRANSFORMERS_CACHE:-/home/appuser/.cache/huggingface/transformers} \
    HF_DATASETS_CACHE=${HF_DATASETS_CACHE:-/home/appuser/.cache/huggingface/datasets}

# Expor porta
EXPOSE 8001

# Comando para executar o servidor com hot reload
CMD ["uvicorn", "src.server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"] 