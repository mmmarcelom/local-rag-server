#!/usr/bin/env python3
"""
Script para Adicionar Conhecimento na Base RAG
==============================================

Este script permite adicionar textos na base de conhecimento do sistema RAG local.
Pode ser executado diretamente ou importado no Jupyter notebook.

Uso:
    python add_knowledge_script.py
    # ou no Jupyter:
    %run add_knowledge_script.py
"""

import requests
import json
from typing import List
from datetime import datetime

# Configura√ß√£o da API
BASE_URL = "http://localhost:8000"  # Ajuste conforme necess√°rio

def test_connection():
    """Testa a conex√£o com o servidor"""
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Servidor est√° funcionando!")
            print(f"Status: {response.json()['status']}")
            return True
        else:
            print(f"‚ùå Erro na conex√£o: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {e}")
        return False

def add_knowledge(documents: List[str], source: str = "jupyter_notebook"):
    """
    Adiciona documentos √† base de conhecimento
    
    Args:
        documents: Lista de textos para adicionar
        source: Fonte dos documentos (padr√£o: jupyter_notebook)
    """
    try:
        url = f"{BASE_URL}/knowledge"
        
        # A API espera documents como lista diretamente no corpo
        # e source como query parameter
        params = {"source": source}
        
        print(f"üì§ Enviando {len(documents)} documento(s) para a base de conhecimento...")
        print(f"üìã Fonte: {source}")
        
        response = requests.post(url, json=documents, params=params)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Sucesso! {result['added']} documento(s) adicionado(s)")
            return result
        else:
            print(f"‚ùå Erro: {response.status_code}")
            print(f"Resposta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao adicionar conhecimento: {e}")
        return None

def add_knowledge_from_file(file_path: str, source: str = "arquivo"):
    """
    Carrega texto de um arquivo e adiciona √† base de conhecimento
    
    Args:
        file_path: Caminho para o arquivo
        source: Fonte dos documentos
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            
        print(f"üìÅ Carregando arquivo: {file_path}")
        print(f"üìè Tamanho: {len(content)} caracteres")
        
        return add_knowledge([content], source)
        
    except FileNotFoundError:
        print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
        return None
    except Exception as e:
        print(f"‚ùå Erro ao ler arquivo: {e}")
        return None

def split_long_text(text: str, max_length: int = 1000):
    """
    Divide um texto longo em partes menores
    
    Args:
        text: Texto para dividir
        max_length: Tamanho m√°ximo de cada parte
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # Dividir por par√°grafos primeiro
    paragraphs = text.split("\n\n")
    
    for paragraph in paragraphs:
        if len(current_part) + len(paragraph) <= max_length:
            current_part += paragraph + "\n\n"
        else:
            if current_part:
                parts.append(current_part.strip())
            current_part = paragraph + "\n\n"
    
    if current_part:
        parts.append(current_part.strip())
    
    return parts

def check_services_status():
    """Verifica o status de todos os servi√ßos"""
    try:
        response = requests.get(f"{BASE_URL}/test-services")
        if response.status_code == 200:
            data = response.json()
            
            print(f"üîç Status Geral: {data['overall_status']}")
            print(f"üìä Resumo: {data['summary']}")
            print("\nüìã Status dos Servi√ßos:")
            
            for service, status in data['services'].items():
                emoji = "‚úÖ" if status['success'] else "‚ùå"
                print(f"{emoji} {service}: {status['status']} - {status['message']}")
            
            return data
        else:
            print(f"‚ùå Erro ao verificar servi√ßos: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Erro ao verificar servi√ßos: {e}")
        return None

def exemplo_uso():
    """Exemplo de uso das fun√ß√µes"""
    print("üöÄ Iniciando exemplo de uso...\n")
    
    # Teste de conex√£o
    print("1. Testando conex√£o com o servidor:")
    if not test_connection():
        print("‚ùå N√£o foi poss√≠vel conectar ao servidor. Verifique se est√° rodando.")
        return
    
    print("\n2. Verificando status dos servi√ßos:")
    check_services_status()
    
    print("\n3. Adicionando exemplo de conhecimento:")
    
    # Exemplo: Adicionar um texto sobre Python
    texto_python = """
    Python √© uma linguagem de programa√ß√£o de alto n√≠vel, interpretada e de prop√≥sito geral. 
    Foi criada por Guido van Rossum e lan√ßada em 1991. Python √© conhecida por sua sintaxe 
    simples e leg√≠vel, que enfatiza a legibilidade do c√≥digo. √â amplamente utilizada em 
    desenvolvimento web, ci√™ncia de dados, intelig√™ncia artificial, automa√ß√£o e muito mais.
    """
    
    resultado = add_knowledge([texto_python], "exemplo_python")
    print(f"\nüìä Resultado: {resultado}")
    
    print("\n4. Exemplo com m√∫ltiplos textos:")
    
    # Exemplo: Adicionar m√∫ltiplos textos sobre diferentes t√≥picos
    textos = [
        """
        FastAPI √© um framework web moderno e r√°pido para Python, baseado em type hints padr√£o do Python. 
        √â usado para construir APIs com Python 3.6+ e oferece alta performance, rivalizando com NodeJS e Go.
        """,
        
        """
        Machine Learning √© um subcampo da intelig√™ncia artificial que se concentra no desenvolvimento 
        de algoritmos e modelos estat√≠sticos que permitem aos computadores melhorar automaticamente 
        atrav√©s da experi√™ncia.
        """,
        
        """
        Docker √© uma plataforma para desenvolver, enviar e executar aplica√ß√µes em containers. 
        Os containers s√£o unidades padronizadas de software que empacotam c√≥digo e todas as suas 
        depend√™ncias para que a aplica√ß√£o execute rapidamente e de forma confi√°vel.
        """
    ]
    
    resultado = add_knowledge(textos, "exemplos_multiplos")
    print(f"\nüìä Resultado: {resultado}")
    
    print("\n5. Exemplo com divis√£o de texto longo:")
    
    # Exemplo de uso com texto longo
    texto_longo = """
    Este √© um texto muito longo que ser√° dividido em partes menores para ser adicionado √† base de conhecimento. 
    Cada parte ser√° processada separadamente pelo sistema RAG, permitindo uma melhor organiza√ß√£o e recupera√ß√£o 
    das informa√ß√µes quando necess√°rio.

    A divis√£o de textos longos √© uma pr√°tica comum em sistemas de recupera√ß√£o de informa√ß√£o, pois permite 
    que o sistema encontre informa√ß√µes espec√≠ficas dentro de documentos extensos de forma mais eficiente.

    Al√©m disso, textos menores s√£o mais f√°ceis de processar e indexar, melhorando a performance geral 
    do sistema de busca e recupera√ß√£o de conhecimento.
    """
    
    partes = split_long_text(texto_longo, max_length=200)
    print(f"üìù Texto dividido em {len(partes)} parte(s):")
    for i, parte in enumerate(partes, 1):
        print(f"\n--- Parte {i} ---")
        print(parte[:100] + "..." if len(parte) > 100 else parte)
    
    # Adicionar as partes √† base de conhecimento
    resultado = add_knowledge(partes, "texto_dividido")
    print(f"\nüìä Resultado: {resultado}")
    
    print("\n‚úÖ Exemplo conclu√≠do!")

if __name__ == "__main__":
    print("=" * 60)
    print("SCRIPT PARA ADICIONAR CONHECIMENTO NA BASE RAG")
    print("=" * 60)
    print()
    
    # Executar exemplo
    exemplo_uso()
    
    print("\n" + "=" * 60)
    print("INSTRU√á√ïES DE USO:")
    print("=" * 60)
    print()
    print("Para usar este script no Jupyter notebook:")
    print("1. Execute: %run add_knowledge_script.py")
    print("2. Use as fun√ß√µes dispon√≠veis:")
    print("   - add_knowledge(documents, source)")
    print("   - add_knowledge_from_file(file_path, source)")
    print("   - split_long_text(text, max_length)")
    print("   - check_services_status()")
    print("   - test_connection()")
    print()
    print("Exemplos:")
    print("add_knowledge(['Seu texto aqui'], 'fonte_personalizada')")
    print("add_knowledge_from_file('documento.txt', 'documento_externo')")
    print("check_services_status()") 