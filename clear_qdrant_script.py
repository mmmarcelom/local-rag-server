#!/usr/bin/env python3
"""
Script para Limpar Dados do Qdrant
==================================

Este script permite limpar todos os dados da base de conhecimento do Qdrant.
Pode ser executado diretamente ou usado como refer√™ncia para outras implementa√ß√µes.

Uso:
    python clear_qdrant_script.py
    # ou no Jupyter:
    %run clear_qdrant_script.py
"""

import requests
import json
from typing import Optional
from datetime import datetime

# Configura√ß√£o da API
BASE_URL = "http://localhost:8000"  # Ajuste conforme necess√°rio

def test_connection():
    """Testa a conex√£o com o servidor"""
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Servidor est√° funcionando!")
            print(f"Status: {response.json()['status']}")
            return True
        else:
            print(f"‚ùå Erro na conex√£o: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {e}")
        return False

def clear_knowledge_base() -> Optional[dict]:
    """
    Limpa todos os dados da base de conhecimento via API
    
    Returns:
        dict: Resultado da opera√ß√£o ou None em caso de erro
    """
    try:
        url = f"{BASE_URL}/knowledge"
        
        print("üóëÔ∏è Iniciando limpeza da base de conhecimento...")
        
        response = requests.delete(url)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Sucesso! {result.get('message', 'Base limpa')}")
            return result
        else:
            print(f"‚ùå Erro: {response.status_code}")
            print(f"Resposta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao limpar base de conhecimento: {e}")
        return None

def get_knowledge_stats() -> Optional[dict]:
    """
    Obt√©m estat√≠sticas da base de conhecimento (se dispon√≠vel)
    
    Returns:
        dict: Estat√≠sticas ou None em caso de erro
    """
    try:
        url = f"{BASE_URL}/health"
        
        print("üìä Verificando status dos servi√ßos...")
        
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            print(f"üîç Status Geral: {data.get('status', 'unknown')}")
            print(f"üìã Servi√ßos: {data.get('services', {})}")
            return data
        else:
            print(f"‚ùå Erro ao obter estat√≠sticas: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        return None

def clear_qdrant_direct(host: str = "localhost", port: int = 6333, collection_name: str = "knowledge_base"):
    """
    Limpa o Qdrant diretamente (sem usar a API)
    
    Args:
        host: Host do Qdrant
        port: Porta do Qdrant
        collection_name: Nome da cole√ß√£o
    """
    try:
        from qdrant_client import QdrantClient
        from qdrant_client.http.models import Distance, VectorParams
        
        print(f"üîó Conectando diretamente ao Qdrant em {host}:{port}...")
        
        client = QdrantClient(host=host, port=port)
        
        # Verificar se a cole√ß√£o existe
        collections = client.get_collections()
        collection_names = [c.name for c in collections.collections]
        
        if collection_name in collection_names:
            print(f"üóëÔ∏è Deletando cole√ß√£o '{collection_name}'...")
            client.delete_collection(collection_name)
            print(f"‚úÖ Cole√ß√£o '{collection_name}' deletada")
        
        # Recriar a cole√ß√£o vazia
        print(f"üîÑ Recriando cole√ß√£o '{collection_name}'...")
        client.create_collection(
            collection_name=collection_name,
            vectors_config=VectorParams(size=384, distance=Distance.COSINE)
        )
        print(f"‚úÖ Cole√ß√£o '{collection_name}' recriada com sucesso!")
        return True
        
    except ImportError:
        print("‚ùå Biblioteca qdrant-client n√£o encontrada")
        print("üí° Instale com: pip install qdrant-client")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao limpar Qdrant diretamente: {e}")
        return False

def confirm_clear():
    """Solicita confirma√ß√£o do usu√°rio antes de limpar"""
    print("\n‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o ir√° deletar TODOS os dados da base de conhecimento!")
    print("üìù Esta a√ß√£o n√£o pode ser desfeita.")
    
    while True:
        response = input("\nü§î Tem certeza que deseja continuar? (sim/n√£o): ").lower().strip()
        
        if response in ['sim', 's', 'yes', 'y']:
            return True
        elif response in ['n√£o', 'nao', 'n', 'no']:
            return False
        else:
            print("‚ùå Por favor, responda 'sim' ou 'n√£o'")

def main():
    """Fun√ß√£o principal do script"""
    print("=" * 60)
    print("SCRIPT PARA LIMPAR DADOS DO QDRANT")
    print("=" * 60)
    print()
    
    # Testar conex√£o
    print("1. Testando conex√£o com o servidor:")
    if not test_connection():
        print("‚ùå N√£o foi poss√≠vel conectar ao servidor.")
        print("üí° Verifique se o servidor est√° rodando na porta 8000")
        return
    
    # Obter estat√≠sticas
    print("\n2. Verificando status dos servi√ßos:")
    stats = get_knowledge_stats()
    
    # Solicitar confirma√ß√£o
    if not confirm_clear():
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return
    
    # Limpar via API
    print("\n3. Limpando base de conhecimento via API:")
    result = clear_knowledge_base()
    
    if result and result.get('status') == 'success':
        print("‚úÖ Base de conhecimento limpa com sucesso via API!")
    else:
        print("‚ùå Falha ao limpar via API. Tentando limpeza direta...")
        
        # Tentar limpeza direta
        print("\n4. Tentando limpeza direta do Qdrant:")
        if clear_qdrant_direct():
            print("‚úÖ Base de conhecimento limpa com sucesso via conex√£o direta!")
        else:
            print("‚ùå Falha na limpeza direta tamb√©m")
    
    print("\n" + "=" * 60)
    print("OPERA√á√ÉO CONCLU√çDA")
    print("=" * 60)

if __name__ == "__main__":
    main() 